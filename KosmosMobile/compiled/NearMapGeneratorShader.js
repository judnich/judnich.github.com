//@ sourceMappingURL=NearMapGeneratorShader.map
// Generated by CoffeeScript 1.6.1
(function() {
  var frag, vert;

  frag = "precision mediump float;\n\nvarying vec3 vPos;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\n\nfloat heightFunc(vec3 coord)\n{\n        vec3 v;\n\n        float a = 0.0;\n        //float p = 4.0;\n        float p = 8.0;\n\n        for (int i = 0; i < 6; ++i) {\n                v.x = coord.x * p; v.y = coord.y * p; v.z = coord.z * p;\n\n                float ridged;\n\n                ridged = 1.0 - abs(snoise(v));\n                ridged /= float(i)+1.0;\n\n                v.x = coord.x * p / 2.5; v.y = coord.y * p / 2.5; v.z = coord.z * p / 2.5;\n                float k = (snoise(v)+1.0) / 2.0;\n\n                v.x = coord.x * p / 1.0; v.y = coord.y * p / 1.0; v.z = coord.z * p / 1.0;\n\n                a += ridged * k;\n                \n                if (i >= 3) {\n                        v.x = coord.x * p * 8.0; v.y = coord.y * p * 8.0; v.z = coord.z * p * 8.0;\n                        float rolling = (snoise(v)+1.0) / 2.0;\n                        a += (rolling) * (1.0-k) / float(50);\n                }\n\n                p *= 2.0;\n        }\n\n        a /= 1.6;\n\n        return a;\n}\n\n#define ONE_TEXEL (1.0/4096.0)\n\n\nfloat getHeightOnCube(vec3 cubePos)\n{\n        vec3 pos = normalize(cubePos);\n        return heightFunc(pos);\n }\n\n\nvoid main(void) {\n        float height = getHeightOnCube(vPos);\n        gl_FragColor = vec4(height, height, height, height);\n}\n";

  vert = "attribute vec2 aUV;\nattribute vec3 aPos;\nattribute vec3 aTangent;\nattribute vec3 aBinormal;\nvarying vec3 vPos;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\n\nuniform vec2 verticalViewport;\n\nvoid main(void) {\n	vPos = aPos;\n        vTangent = aTangent;\n        vBinormal = aBinormal;\n\n        vec2 pos = aUV;\n        pos.y = (pos.y - verticalViewport.x) / verticalViewport.y;\n        pos = pos * 2.0 - 1.0;\n\n	gl_Position = vec4(pos, 0.0, 1.0);\n}\n";

  xgl.addProgram("nearMapGenerator", vert, xgl.commonNoiseShaderSource + frag);

}).call(this);
