//@ sourceMappingURL=Bounds.map
// Generated by CoffeeScript 1.6.1
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Box = (function() {

    function Box() {}

    Box.min = vec3.fromValues(0, 0, 0);

    Box.max = vec3.fromValues(1, 1, 1);

    Box.prototype.normalize = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0; _i <= 2; i = ++_i) {
        if (this.min[i] > this.max[i]) {
          _results.push((_ref = [this.max[i], this.min[i]], this.min[i] = _ref[0], this.max[i] = _ref[1], _ref));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Box.prototype.getCenter = function() {
      var center;
      center = vec3.create();
      vec3.add(center, this.min, this.max);
      vec3.scale(center, center, 0.5);
      return center;
    };

    Box.prototype.getRadius = function() {
      var cross;
      cross = vec3.create();
      vec3.sub(cross, this.max, this.min);
      return vec3.len(cross) * 0.5;
    };

    Box.prototype.getCorners = function() {
      var corners;
      corners = [];
      corners[0] = vec3.fromValues(this.max[0], this.max[1], this.max[2]);
      corners[1] = vec3.fromValues(this.min[0], this.max[1], this.max[2]);
      corners[2] = vec3.fromValues(this.min[0], this.min[1], this.max[2]);
      corners[3] = vec3.fromValues(this.max[0], this.min[1], this.max[2]);
      corners[4] = vec3.fromValues(this.max[0], this.max[1], this.min[2]);
      corners[5] = vec3.fromValues(this.min[0], this.max[1], this.min[2]);
      corners[6] = vec3.fromValues(this.min[0], this.min[1], this.min[2]);
      corners[7] = vec3.fromValues(this.max[0], this.min[1], this.min[2]);
      return corners;
    };

    Box.prototype.getCorner = function(i) {
      if (i === 0) {
        return vec3.fromValues(this.max[0], this.max[1], this.max[2]);
      } else if (i === 1) {
        return vec3.fromValues(this.min[0], this.max[1], this.max[2]);
      } else if (i === 2) {
        return vec3.fromValues(this.min[0], this.min[1], this.max[2]);
      } else if (i === 3) {
        return vec3.fromValues(this.max[0], this.min[1], this.max[2]);
      } else if (i === 4) {
        return vec3.fromValues(this.max[0], this.max[1], this.min[2]);
      } else if (i === 5) {
        return vec3.fromValues(this.min[0], this.max[1], this.min[2]);
      } else if (i === 6) {
        return vec3.fromValues(this.min[0], this.min[1], this.min[2]);
      } else if (i === 7) {
        return vec3.fromValues(this.max[0], this.min[1], this.min[2]);
      } else {
        return null;
      }
    };

    Box.prototype.getOctant = function(i) {
      var b;
      b = new Box();
      b.min = this.getCenter();
      b.max = this.getCorner(i);
      if (b.max === null) {
        return null;
      }
      b.normalize();
      return b;
    };

    return Box;

  })();

  root.Rect = (function() {

    function Rect() {}

    Rect.min = vec2.fromValues(0, 0);

    Rect.max = vec2.fromValues(1, 1);

    Rect.prototype.normalize = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0; _i <= 1; i = ++_i) {
        if (this.min[i] > this.max[i]) {
          _results.push((_ref = [this.max[i], this.min[i]], this.min[i] = _ref[0], this.max[i] = _ref[1], _ref));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Rect.prototype.getCenter = function() {
      var center;
      center = vec3.create();
      vec3.add(center, this.min, this.max);
      vec3.scale(center, center, 0.5);
      return center;
    };

    Rect.prototype.getRadius = function() {
      var cross;
      cross = vec2.create();
      vec2.sub(cross, this.max, this.min);
      return vec2.len(cross) * 0.5;
    };

    Rect.prototype.getCorners = function() {
      var corners;
      corners = [];
      corners[0] = vec2.fromValues(this.max[0], this.max[1]);
      corners[1] = vec2.fromValues(this.min[0], this.max[1]);
      corners[2] = vec2.fromValues(this.min[0], this.min[1]);
      corners[3] = vec2.fromValues(this.max[0], this.min[1]);
      return corners;
    };

    Rect.prototype.getCorner = function(i) {
      if (i === 0) {
        return vec2.fromValues(this.max[0], this.max[1]);
      } else if (i === 1) {
        return vec2.fromValues(this.min[0], this.max[1]);
      } else if (i === 2) {
        return vec2.fromValues(this.min[0], this.min[1]);
      } else if (i === 3) {
        return vec2.fromValues(this.max[0], this.min[1]);
      } else {
        return null;
      }
    };

    Rect.prototype.getQuadrant = function(i) {
      var b;
      b = new Rect();
      b.min = this.getCenter();
      b.max = this.getCorner(i);
      if (b.max === null) {
        return null;
      }
      b.normalize();
      return b;
    };

    return Rect;

  })();

}).call(this);
