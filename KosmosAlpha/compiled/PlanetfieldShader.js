//@ sourceMappingURL=PlanetfieldShader.map
// Generated by CoffeeScript 1.6.1
(function() {
  var frag, vert;

  frag = "\nprecision mediump float;\n\nvarying vec3 vUVA;\nvarying vec4 vColor;\n\nvoid main(void) {\n	// compute planet color based on intensity = 1/dist^2 from center of sprite\n	vec2 dv = vUVA.xy;\n	float d = dot(dv, dv);\n	float lum = clamp(1.0 / (d*100.0), 0.0, 1.0);\n\n	// fall off at a max radius, since 1/dist^2 goes on infinitely\n	d = clamp(d * 4.0, 0.0, 1.0);\n	lum *= 1.0 - d*d;\n\n    gl_FragColor.xyz = vColor.xyz*lum * vUVA.z * vColor.a;\n}\n";

  vert = "\nattribute vec3 aPos;\nattribute vec3 aUV; // third component marks one vertex for blur extrusion\n\nuniform mat4 projMat;\nuniform mat4 modelViewMat;\nuniform vec4 spriteSizeAndViewRangeAndBlur;\n//uniform mat4 modelMat;\n//uniform mat4 viewMat;\n\nvarying vec3 vUVA;\nvarying vec4 vColor;\n\nvoid main(void) {\n	// determine sprite size\n	float spriteSize = spriteSizeAndViewRangeAndBlur.x;\n	//spriteSize = spriteSize * (cos(aPos.w*1000.0) * 0.5 + 1.0); // modulate size by simple PRNG\n\n	// compute vertex position so quad is always camera-facing\n	vec4 pos = vec4(aPos.xyz, 1.0);\n	vec2 offset = aUV.xy * spriteSize;\n\n	//pos = viewMat * modelMat * pos;\n	pos = modelViewMat * pos;\n	pos.xy += offset;\n\n   	// motion blur\n	pos.z *= 1.0 + aUV.z * spriteSizeAndViewRangeAndBlur.w;\n\n	// fade out distant sprites\n	float dist = length(pos.xyz);\n	float alpha = clamp( (1.0 - (dist / spriteSizeAndViewRangeAndBlur.z)) * 1.5, 0.0, 1.0 );\n	alpha *= clamp( ((dist / spriteSizeAndViewRangeAndBlur.y) - 1.0) * 0.5, 0.0, 1.0);\n\n    // the UV coordinates are used to render the actual sprite radial gradient,\n    // and alpha is used to modulate intensity of distant sprites as they fade out\n    vUVA = vec3(aUV.xy, alpha);\n\n    // pass color to frag shader\n    vColor.xyz = vec3(1.0, 1.0, 1.0);\n\n	// dim sprites to account for extra motion blur lit pixels\n	vColor.w = max(0.33, 1.0 - sqrt(abs(spriteSizeAndViewRangeAndBlur.w))*1.5);\n\n	// red/blue shift\n	vColor.xyz += vec3(-spriteSizeAndViewRangeAndBlur.w, -abs(spriteSizeAndViewRangeAndBlur.w), spriteSizeAndViewRangeAndBlur.w);\n\n	// output position, or degenerate triangle if sprite is beyond view range\n	if (alpha > 0.0) {\n    	gl_Position = projMat * pos;\n\n    	// fix subpixel flickering by adding slight screenspace size\n    	gl_Position.xy += aUV.xy * max(0.0, gl_Position.z) / 100.0;\n    }\n    else {\n    	gl_Position = vec4(0, 0, 0, 0);\n    }\n}";

  xgl.addProgram("planetfield", vert, frag);

}).call(this);
