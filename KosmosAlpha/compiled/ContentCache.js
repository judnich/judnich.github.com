//@ sourceMappingURL=ContentCache.map
// Generated by CoffeeScript 1.6.1
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.ContentCache = (function() {

    function ContentCache(maxItems, loaderCallback) {
      this.loadedItems = {};
      this.loadedCount = 0;
      this.queuedItems = [];
      this.maxItems = maxItems;
      this.loaderCallback = loaderCallback;
    }

    ContentCache.prototype.getContent = function(contentId) {
      var item;
      if (this.loadedItems[contentId] !== void 0) {
        item = this.loadedItems[contentId];
        item[1] = (new Date()).getTime();
        return item[0];
      }
      this.queuedItems.push(contentId);
      return null;
    };

    ContentCache.prototype.update = function(maxItemsToLoad) {
      var content, contentId, i, len, _i, _ref, _results;
      if (maxItemsToLoad == null) {
        maxItemsToLoad = 1;
      }
      this._evictOldItems();
      len = Math.min(this.queuedItems.length, maxItemsToLoad);
      if (len <= 0) {
        return;
      }
      _results = [];
      for (i = _i = 0, _ref = len - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        contentId = this.queuedItems.pop();
        if (contentId !== void 0 && this.loadedItems[contentId] === void 0) {
          console.log("Loading content: " + contentId);
          content = this.loaderCallback(contentId);
          this.loadedItems[contentId] = [content, (new Date()).getTime()];
          _results.push(this.loadedCount++);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ContentCache.prototype._evictOldItems = function() {
      var contentId, keys, lastUsed, lastUsedSeed, thisLastUsed, _i, _len, _results;
      if (this.loadedCount > this.maxItems) {
        keys = Object.keys(this.loadedItems);
        _results = [];
        while (this.loadedCount > this.maxItems) {
          lastUsedSeed = null;
          lastUsed = null;
          for (_i = 0, _len = keys.length; _i < _len; _i++) {
            contentId = keys[_i];
            thisLastUsed = this.loadedItems[contentId][1];
            if (lastUsedSeed === null || thisLastUsed < lastUsed) {
              lastUsed = thisLastUsed;
              lastUsedSeed = contentId;
            }
          }
          console.log("Evicting content: " + lastUsedSeed);
          delete this.loadedItems[lastUsedSeed];
          _results.push(this.loadedCount--);
        }
        return _results;
      }
    };

    return ContentCache;

  })();

}).call(this);
