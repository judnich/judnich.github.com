//@ sourceMappingURL=Main.map
// Generated by CoffeeScript 1.6.1
(function() {
  var animating, camera, cameraAngle, enableRetina, gridOffset, gspeed, lastTime, mouseClick, root, smoothElapsed, starfield, tick, tspeed, ttt;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  enableRetina = true;

  camera = null;

  starfield = null;

  animating = true;

  cameraAngle = 0.0;

  mouseClick = function(event) {
    var x, y, _ref;
    _ref = [event.x, event.y], x = _ref[0], y = _ref[1];
    x -= root.canvas.offsetLeft;
    return y -= root.canvas.offsetTop;
  };

  root.kosmosMain = function() {
    console.log("Initializing Kosmos Engine");
    root.canvas = document.getElementById("kosmosCanvas");
    canvas.addEventListener("mousedown", mouseClick, false);
    kosmosResize();
    root.gl = WebGLUtils.setupWebGL(canvas);
    camera = new Camera(canvas.width / canvas.height);
    starfield = new Starfield(200, 300, 1000.0, 10.0, 3000.0);
    camera.position = vec3.fromValues(0, 0, 0);
    camera.target = vec3.fromValues(0, 0, -1);
    camera.near = 0.001;
    camera.far = 4000.0;
    camera.update();
    animating = true;
    return tick();
  };

  root.kosmosResize = function() {
    var devicePixelRatio;
    if (!enableRetina) {
      console.log("Note: Device pixel scaling (retina) is disabled.");
    }
    devicePixelRatio = enableRetina ? window.devicePixelRatio || 1 : 1;
    canvas.width = canvas.clientWidth * devicePixelRatio;
    canvas.height = canvas.clientHeight * devicePixelRatio;
    return console.log("Main framebuffer resolution " + canvas.width + " x " + canvas.height, "with device pixel ratio " + devicePixelRatio);
  };

  gspeed = 0.0;

  tspeed = 0.0;

  root.kosmosSetSpeed = function(speed) {
    return gspeed = speed;
  };

  root.kosmosKill = function() {
    var lastTime;
    lastTime = null;
    animating = !animating;
    if (animating) {
      return tick();
    }
  };

  lastTime = null;

  ttt = 0.0;

  smoothElapsed = 0.0;

  gridOffset = [0, 0, 0];

  tick = function() {
    var blockScale, d, elapsed, i, timeNow, _i, _results;
    if (animating) {
      window.requestAnimFrame(tick);
    }
    d = new Date();
    timeNow = d.getTime();
    if (lastTime !== null) {
      elapsed = (timeNow - lastTime) / 1000.0;
    } else {
      elapsed = 0.0;
    }
    lastTime = timeNow;
    smoothElapsed = elapsed * 0.1 + smoothElapsed * 0.9;
    tspeed = tspeed * 0.95 + 0.05 * gspeed;
    camera.position[2] -= tspeed * smoothElapsed;
    camera.target[0] = camera.position[0];
    camera.target[1] = camera.position[1];
    camera.target[2] = camera.position[2] - 1.0;
    camera.update();
    gl.viewport(0, 0, canvas.width, canvas.height);
    gl.clearColor(0, 0, 0, 1);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    starfield.render(camera, gridOffset);
    blockScale = starfield.blockScale;
    _results = [];
    for (i = _i = 0; _i <= 2; i = ++_i) {
      if (camera.position[i] > blockScale + 10) {
        camera.position[i] -= blockScale * 2;
        gridOffset[i] += 2;
      }
      if (camera.position[i] < -blockScale - 10) {
        camera.position[i] += blockScale * 2;
        gridOffset[i] -= 2;
      }
      if (camera.position[i] > blockScale + 10) {
        camera.position[i] = -blockScale;
        gridOffset[i] += 2;
      }
      if (camera.position[i] < -blockScale - 10) {
        camera.position[i] = blockScale;
        _results.push(gridOffset[i] -= 2);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
