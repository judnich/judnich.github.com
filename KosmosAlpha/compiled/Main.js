//@ sourceMappingURL=Main.map
// Generated by CoffeeScript 1.6.1
(function() {
  var animating, camera, cameraAngle, deltaTime, desiredRotation, desiredSpeed, enableRetina, gridOffset, lastTime, mouseDown, mouseIsDown, mouseMove, mouseUp, mouseX, mouseY, render, root, smoothRotation, smoothSpeed, starfield, tick, updateCoordinateSystem, updateMouse, updateTickElapsed;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  enableRetina = true;

  camera = null;

  starfield = null;

  animating = true;

  cameraAngle = 0.0;

  gridOffset = [0, 0, 0];

  lastTime = null;

  deltaTime = 0.0;

  desiredSpeed = 0.0;

  smoothSpeed = 0.0;

  desiredRotation = quat.create();

  smoothRotation = quat.create();

  mouseIsDown = false;

  mouseX = 0;

  mouseY = 0;

  mouseDown = function(event) {
    mouseIsDown = true;
    return mouseMove(event);
  };

  mouseUp = function(event) {
    return mouseIsDown = false;
  };

  mouseMove = function(event) {
    var rightPanel, x, y, _ref;
    _ref = [event.x, event.y], x = _ref[0], y = _ref[1];
    rightPanel = document.getElementById("rightbar");
    x = (x - rightPanel.offsetLeft) / canvas.clientWidth;
    y = (y - rightPanel.offsetTop) / canvas.clientHeight;
    mouseX = (x - 0.5) * 2;
    return mouseY = (y - 0.5) * 2;
  };

  root.kosmosMain = function() {
    console.log("Initializing Kosmos Engine");
    root.canvas = document.getElementById("kosmosCanvas");
    canvas.addEventListener("mousedown", mouseDown, false);
    canvas.addEventListener("mouseup", mouseUp, false);
    canvas.addEventListener("mousemove", mouseMove, false);
    kosmosResize();
    root.gl = WebGLUtils.setupWebGL(canvas, void 0, function() {
      return document.getElementById("glErrorMessage").style.display = "block";
    });
    if (!root.gl) {
      return;
    }
    camera = new Camera(canvas.width / canvas.height);
    starfield = new Starfield(200, 300, 1000.0, 5.0, 3000.0);
    camera.position = vec3.fromValues(0, 0, 0);
    camera.target = vec3.fromValues(0, 0, -1);
    camera.near = 0.001;
    camera.far = 4000.0;
    animating = true;
    return tick();
  };

  root.kosmosKill = function() {
    lastTime = null;
    animating = !animating;
    if (animating) {
      return tick();
    }
  };

  root.kosmosResize = function() {
    var devicePixelRatio;
    if (!enableRetina) {
      console.log("Note: Device pixel scaling (retina) is disabled.");
    }
    devicePixelRatio = enableRetina ? window.devicePixelRatio || 1 : 1;
    canvas.width = canvas.clientWidth * devicePixelRatio;
    canvas.height = canvas.clientHeight * devicePixelRatio;
    return console.log("Main framebuffer resolution " + canvas.width + " x " + canvas.height, "with device pixel ratio " + devicePixelRatio);
  };

  root.kosmosSetSpeed = function(speed) {
    return desiredSpeed = speed;
  };

  updateTickElapsed = function() {
    var d, elapsed, timeNow;
    d = new Date();
    timeNow = d.getTime();
    if (lastTime !== null) {
      elapsed = (timeNow - lastTime) / 1000.0;
    } else {
      elapsed = 0.0;
    }
    lastTime = timeNow;
    return deltaTime = elapsed * 0.1 + deltaTime * 0.9;
  };

  updateMouse = function() {
    var pitch, qPitch, qYaw, yaw;
    if (!mouseIsDown) {
      return;
    }
    pitch = mouseY * 50;
    yaw = mouseX * 65;
    qPitch = quat.create();
    quat.setAxisAngle(qPitch, vec3.fromValues(-1, 0, 0), xgl.degToRad(pitch));
    qYaw = quat.create();
    quat.setAxisAngle(qYaw, vec3.fromValues(0, -1, 0), xgl.degToRad(yaw));
    quat.multiply(qYaw, qYaw, qPitch);
    quat.multiply(desiredRotation, smoothRotation, qYaw);
    return quat.normalize(desiredRotation, desiredRotation);
  };

  tick = function() {
    var moveVec, rotationAccel;
    if (animating) {
      window.requestAnimFrame(tick);
    }
    updateTickElapsed();
    updateMouse();
    smoothSpeed = smoothSpeed * 0.90 + 0.10 * desiredSpeed;
    moveVec = vec3.fromValues(0, 0, -smoothSpeed * deltaTime);
    vec3.transformQuat(moveVec, moveVec, smoothRotation);
    vec3.add(camera.position, camera.position, moveVec);
    rotationAccel = rotationAccel * 0.95 + 0.05;
    quat.slerp(smoothRotation, smoothRotation, desiredRotation, 0.05);
    camera.setRotation(smoothRotation);
    camera.update();
    return render();
  };

  render = function() {
    var blur;
    gl.viewport(0, 0, canvas.width, canvas.height);
    gl.clearColor(0, 0, 0, 1);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    blur = Math.abs(smoothSpeed) / 15000.0;
    blur -= 0.001;
    if (blur < 0) {
      blur = 0;
    }
    starfield.render(camera, gridOffset, blur);
    return updateCoordinateSystem();
  };

  updateCoordinateSystem = function() {
    var blockScale, i, _i, _results;
    blockScale = starfield.blockScale;
    _results = [];
    for (i = _i = 0; _i <= 2; i = ++_i) {
      if (camera.position[i] > blockScale + 10) {
        camera.position[i] -= blockScale * 2;
        gridOffset[i] += 2;
      }
      if (camera.position[i] < -blockScale - 10) {
        camera.position[i] += blockScale * 2;
        gridOffset[i] -= 2;
      }
      if (camera.position[i] > blockScale + 10) {
        camera.position[i] = -blockScale;
        gridOffset[i] += 2;
      }
      if (camera.position[i] < -blockScale - 10) {
        camera.position[i] = blockScale;
        _results.push(gridOffset[i] -= 2);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
