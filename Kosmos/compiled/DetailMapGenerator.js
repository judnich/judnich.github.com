// Generated by CoffeeScript 1.6.3
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.DetailMapGenerator = (function() {
    function DetailMapGenerator(mapResolution) {
      var buff, i, uv, _i, _len, _ref;
      this.shader = xgl.loadProgram("detailMapGenerator");
      this.shader.attribs = xgl.getProgramAttribs(this.shader, ["aUV"]);
      this.fbo = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);
      this.fbo.width = mapResolution;
      this.fbo.height = mapResolution;
      console.log("Initialized detail map generator FBO at " + this.fbo.width + " x " + this.fbo.height);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      buff = new Float32Array(6 * 2);
      i = 0;
      _ref = [[0, 0], [1, 0], [0, 1], [1, 0], [1, 1], [0, 1]];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        uv = _ref[_i];
        buff[i++] = uv[0];
        buff[i++] = uv[1];
      }
      this.quadVerts = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVerts);
      gl.bufferData(gl.ARRAY_BUFFER, buff, gl.STATIC_DRAW);
      gl.bindBuffer(gl.ARRAY_BUFFER, null);
      this.quadVerts.itemSize = 2;
      this.quadVerts.numItems = buff.length / this.quadVerts.itemSize;
    }

    DetailMapGenerator.prototype._start = function() {
      gl.disable(gl.DEPTH_TEST);
      gl.depthMask(false);
      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);
      gl.viewport(0, 0, this.fbo.width, this.fbo.height);
      gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVerts);
      return gl.enableVertexAttribArray(this.shader.attribs.aUV);
    };

    DetailMapGenerator.prototype._finish = function() {
      gl.disableVertexAttribArray(this.shader.attribs.aUV);
      gl.bindBuffer(gl.ARRAY_BUFFER, null);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.useProgram(null);
      gl.depthMask(true);
      return gl.enable(gl.DEPTH_TEST);
    };

    DetailMapGenerator.prototype.generate = function() {
      var detailMap;
      this._start();
      gl.useProgram(this.shader);
      gl.vertexAttribPointer(this.shader.attribs.aUV, 2, gl.FLOAT, false, this.quadVerts.itemSize * 4, 0);
      detailMap = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, detailMap);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.fbo.width, this.fbo.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
      gl.bindTexture(gl.TEXTURE_2D, null);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, detailMap, 0);
      gl.drawArrays(gl.TRIANGLES, 0, this.quadVerts.numItems);
      gl.useProgram(null);
      this._finish();
      return detailMap;
    };

    return DetailMapGenerator;

  })();

}).call(this);

/*
//@ sourceMappingURL=DetailMapGenerator.map
*/
